C  BASALT.FOR:  CALCULATION OF PHASE EQUILIBRIA IN BASALTIC SYSTEMS.
C
C      J. SCOTT WEAVER
C        DEPT. OF GEOLOGY
C        ALFRED UNIVERSITY
C        ALFRED, NY 14802
C
C      CHARLES H. LANGMUIR
C        DEPT. OF GEOLOGICAL SCIENCES AND
C        LAMONT-DOHERTY GEOLOGICAL OBSERVATORY
C         OF COLUMBIA UNIVERSITY
C        PALISADES, NEW YORK 10964
C
C
C  VERSION 2.0;  11/08/83
C                03/05/85  JSW  MATEQ FIXED
C                03/08/85  JSW  REVISIONS TO MAIN, DRIVER
C                01/08/86  JSW  CIMPL ADDED
C
C  WRITTEN IN FORTRAN-66 (MICROSOFT) TO RUN UNDER CP/M 2.2 ON
C  ORIGINAL HARDWARE:  48K APPLE-II WITH 16K RAMCARD AND Z-80 CARD.
C  PROGRAM LENGTH:  25K BYTES
C
C    PROGRAM UNITS:          FUNCTION:
C
C    PROGRAM    MAIN       HANDLE INTERACTION WITH USER
C    SUBROUTINE DRIVER     SET UP AND RUN VARIOUS MODELS
C    SUBROUTINE PRNTER     OUTPUT TO CONSOLE AND/OR PRINTER
C    SUBROUTINE STATE      CALCULATE ACTUAL STATE OF SYSTEM
C    BLOCK DATA SETUP      INITIALIZE PROGRAM VARIABLES
C    SUBROUTINE KDCALC     CALCULATE PARTITION COEFFICIENTS
C    SUBROUTINE STOICH     PERMIT ARBITRARY STABILITY CONDITIONS
C    SUBROUTINE CIMPL      CALCULATE IMPLICIT COMPONENTS
C    SUBROUTINE MATEQ      LINEAR EQUATIONS SOLVER
C
C  THE BULK OF COMMUNICATION BETWEEN PROGRAM UNITS IS VIA COMMON.
C  THE VARIABLES IN BLANK COMMON ARE DESCRIBED IN 'SETUP'.
C  PROGRAM UNITS CONTAIN MORE DETAILED COMMENTS.
C
C----------------------------------------------------------------------
C
      PROGRAM MAIN
C
C  HANDLES ALL INTERACTION WITH USER INCLUDING SELECTION OF TASK,
C  INPUT OF PARAMETERS, AND DISK I/O.  CALLS 'DRIVER' FOR SET-UP AND
C  EXECUTION OF TASK.
C
C  CALLS:  DRIVER
C
      REAL*4 PARMS(6),CDAT(50,10)
      INTEGER MODES(5)
      BYTE FILNAM(11)
      INTEGER FRSTFG
      REAL*8 NAMFIL,BLANK
      LOGICAL NOMODL,NODATA,NOTEMP
C
      COMMON NS,SNAMES(5),SPARM(5)
      COMMON NPHAS,NCOMP,NCIMP,NCOMPT,NPDIM,NCDIM
      COMMON PNAMEA(10),CNAMEJ(20)
      COMMON FL,FA(10)
      COMMON CSJ(20),CLJ(20),CAJ(10,20)
      COMMON TA(10),UAJ(10,20)
      COMMON FKDAJ(10,20)
      COMMON IMPDIM,IMPL(10),IMCL(10),DA0(10),DAJ(10,20)
      COMMON RJ(20),QA(10),PAB(10,10)
C
      COMMON/SYSIO/ NCON,NLST,NDSK
C
      EQUIVALENCE (NAMFIL,FILNAM(1))
C
      DATA NCON,NLST,NDSK/3,2,6/
      DATA BLANK/'        '/
      DATA NOMODL,NODATA,NOTEMP/.TRUE.,.TRUE.,.TRUE./
      DATA NCDMAX/50/
      DATA MODES/1,0,0,0,0/
      DATA PARMS/1000.,1000.,10.,10.,273.16,.5/
C
C  ASSIGN I/O UNIT NUMBERS TO CONSOLE.
C
      NRDR=NCON
      NWRT=NCON
C
C  GET A TASK TO DO
C
100     CONTINUE
      WRITE(NWRT,9000)
9000    FORMAT(1H0 ,'TASK?  <CR> FOR MENU:  ')
      READ(NRDR,9010) NTASK
9010    FORMAT(I2)
      GOTO(1100,1200,1300,2100,1500,1600,1700,1800,1900,2000,
     1  1160),NTASK
C
C  INVALID TASKS END HERE TOO.  PUT UP THE MENU.
C
      IF (NTASK.EQ.99)  STOP
      WRITE(NWRT,9020)
9020    FORMAT(1H1/
     1  '  1:  ENTER DATA FROM KEYBOARD'/
     2  '  2:  SPECIFY DATA TO BE RUN'/
     3  '  3:  CHOOSE MODEL TO RUN'/
     4  '  4:  INITIALIZE ON/OFF'/
     5  '  5:  SELECT FULL OR SUMMARY OUTPUT'/
     6  '  6:  REPORT CHANGES ONLY'/
     7  '  7:  PRINTER ON/OFF'/
     8  '  8:  ENTER TEMP, ETC AND RUN THE MODEL'/
     9  '  9:  RUN THE MODEL'/
     1  ' 10:  SELECT TEMPERATURE SCALE'/
     2  ' 11:  SAVE COMPOSITION DATA TO DISK'/
     3  ' 12:  EXIT THIS PROGRAM'/)
      GOTO 100
C
C  DATA ENTRY ROUTINES
C
1100    CONTINUE
        WRITE(NWRT,9100)
9100    FORMAT('0DATA FILE NAME/DRIVE? <CR> FOR KEYBOARD (11A1,I1) :'/)
        READ(NRDR,9110) FILNAME, NDRV
9110    FORMAT(11A1,I1)
        IF (NAMFIL.NE.BLANK) GOTO 1150
        WRITE(NWRT,9115) (CNAMEJ(J), J=1,NCOMPT)
9115    FORMAT(1H1 ,'COMPONENTS NEEDED:  ',10(A4,1X)/' ',20X,10(A4,1X))
9120    FORMAT('0ENTER DATA IN FORMAT (20F4.4)  <CR> TO END'/)

      DO 1130 NCDAT=1,NCDMAX
      WRITE(NWRT,9125) NCDAT
9125  FORMAT(' CASE ',I3,'? ')
      READ(NRDR,9130)  (CDAT(NCDAT,J),J=1,NCOMPT)
9130  FORMAT(20F4.4)
C
C  CHECK FOR NULL DATA ENTRY
C
      DO 1120 J=1,NCOMPT
      IF (CDAT(NCDAT,J).GT.0.)  GOTO 1125
1120  CONTINUE
      NCDAT=NCDAT-1
      GOTO 1140
1125  S=1.
      DO 1126 J=1, NCOMP
1126  S=S-CDAT(NCDAT,J)
      CDAT(NCDAT,NCOMPT)=S
1130  CONTINUE
1140  IF (NCDAT.GT.0)  NODATA=.FALSE.
      GOTO 100
C
C  READ DATA FROM DISK
C
1150  CONTINUE
      CALL OPEN(NDSK,FILNAM,NDRV)
      READ(NDSK,END=1180,ERR=1190)  NCDAT,NZ,
     1  ((CDAT(I,J),J=1,NZ),I=1,NCDAT)
      ENDFILE NDSK
      NODATA=.FALSE.
      GOTO 100
C
C  WRITE DATA TO DISK
C
1160  CONTINUE
      WRITE(NWRT,9160)
9160  FORMAT(1H0 ,'FILENAME & DRIVE?  (11A1,I1)  :')
      READ(NRDR,9110)  FILNAM,NDRV
      IF(NAMFIL.EQ.BLANK)  GOTO 100
      CALL OPEN(NDSK,FILNAM,NDRV)
      WRITE(NDSK,END=1180,ERR=1190)  NCDAT,NCOMPT,
     1  ((CDAT(I,J),J=1,NCOMPT),I=1,NCDAT)
      ENDFILE NDSK
      GOTO 100
C
C  DISK I/O ERROR MESSAGES
C
1180  WRITE(NWRT,9180)
9180  FORMAT('0EOF ON FILE:  ',11A1,5X,'DRIVE:  ',I1)
      GOTO 100
1190  WRITE(NWRT,9190)  FILNAM,NDRV
9190  FORMAT('0ERROR ON FILE:  ',11A1,5X,'DRIVE:  ',I1)
      GOTO 100
C
C  SELECT COMPOSITION DATA TO BE RUN
C
1200  WRITE(NWRT,9200)
9200  FORMAT('0RANGE OF DATA TO RUN?  (2I3)  :')
      READ(NRDR,9210) NCLO,NCHI
9210  FORMAT(2I3)
      GOTO 100
C
C  SELECT MODEL TO RUN
C
1300  WRITE(NWRT,9300)
9300  FORMAT(' ENTER MODEL:  1=EQUILIBRIUM XLLIZATION/MELTING'/
     1     '               2=FRACTIONAL XLLIZATION'/
     2     '               3=FRACTIONAL MELTING'/)
      READ(NRDR,9010) MODES(1)
      IF((MODES(1).LT.1).OR.(MODES(1).GT.3))  MODES(1)=1
      NOMODL=.FALSE.
      GOTO 100
C
C  TOGGLE INITIALIZATION SWITCH
C
1400  IF (MODES(2).EQ.0) GOTO 1410
      MODES(2)=0
      WRITE(NWRT, 9400)
9400  FORMAT('0INITIALIZATION IS OFF')
      GOTO 100
      
1410  MODES(2) = 1
      WRITE(NWRT,9410)
9410  FORMAT('0INITIALIZATION IS ON')
      GOTO 100
C
C  TOGGLE FULL/SUMMARY OUTPUT
C
1500  IF (MODES(4).EQ.0)  GOTO 1510
      MODES(4)=0
      WRITE(NWRT, 9500)
9500  FORMAT('0FULL OUTPUT MODE')
      GOTO 100
C
C  TOGGLE ALL/CHANGES ONLY
C
1600  IF (MODES(5).EQ.0) GOTO 1610
      MODES(5)=0
      WRITE(NWRT, 9600)
9600  FORMAT('0OUTPUT FOR ANY TEMPERATURE')
      GOTO 100
1610  MODES(5)=1
      WRITE(NWRT,9610)
9160  FORMAT('0OUTPUT FOR PHASE APPEARANACES ONLY')
      GOTO 100
C
C  TOGGLE PRINTER ON/OFF
C
1700  IF(MODES(3).EQ.0)  GOTO 1710
      MODES(3) = 0
      WRITE(NWRT, 9700)
9700  FORMAT('0PRINTER IS OFF')
      GOTO 100
1710  MODES(3)=1
      WRITE(NWRT,9710)
9710  FORMAT('0PRINTER IS ON')
      GOTO 100
C
C  ENTER INITIAL TEMP, FINAL TEMP, INCREMENT, PRINT INCR, MIN FRACT.
C
1800  WRITE(NWRT,9800)
9800  FORMAT('0ENTER TI,TF,DT,DP,FLR:  (4F5.0, F5.5)'/)
      READ(NRDR,9810) PARMS(1),PARMS(2),PARMS(3),PARMS(4),PARMS(6)
9810  FORMAT(4F5.0,F5.5)
      IF(PARMS(1).GT.0.)  GOTO 1810
      NOTEMP=.TRUE.
      GOTO 100
1810  PARMS(3)=ABS(PARMS(3))
      IF(PARMS(1).GT.PARMS(2))  PARMS(3)=-PARMS(3)
      NOTEMP=.FALSE.
C
C  RUN THE MODEL
C
1900  CONTINUE
      IF(NODATA)  GOTO 1100
      IF(NOMODL)  GOTO 1300
      IF(NOTEMP)  GOTO 1800
      IF(NCLO.LT.1) NCLO=1
      IF(NCLO.GT.NCDAT) NCLO=NCDAT
      IF(NCHI.LT.NCLO) NCHI=NCLO
      IF(NCHI.GT.NCDAT) NCHI=NCDAT
      DO 1950 K=NCLO,NCHI
      DO 1910 J=1, NCOMPT
1910  CSJ(J)=CDAT(K,J)
      CALL DRIVER(MODES,PARMS)
1950  CONTINUE
      GOTO 1800
C
C  SWITCH TEMPERATURE SCALES
C
2000  IF(ABS(PARMS(5)-273.).GT.1.) GOTO 2010
      PARMS(5)=0.
      WRITE(NWRT,9900)
9900  FORMAT('0KELVIN TEMPERATURE SCALE ASSUMED')
      GOTO 100
2010  PARMS(5)=273.16
      WRITE(NWRT,9910)
9910  FORMAT('0CELSIUS TEMPERATURE SCALE ASSUMED')
      GOTO 100
	END
C
C----------------------------------------------------------------------
C
      SUBROUTINE DRIVER(MODES,PARMS)
C
C  DRIVER PROVIDES SEVERAL MODELS FOR CALCULATION.  ACTUAL STATE
C  CALCUALTIONS ARE DONE IN SUBROUTINE STATE, CALLED BY DRIVER AS
C  NEEDED.  THE ARRAYS MODES, AND PARMS ARE PROVIDED TO PERMIT
C  PARAMETER PASSING AND CONTROL OF DRIVER.  AT PRESENT, THE FOLLOWING
C  ARE USED:
C
C       MODES(1)  =1 FOR EQUILIBRIUM CRYSTALLIZATION.
C                 =2 FOR FRACTIONAL CRYSTALLIZATION.
C                 =3 FOR FRACTIONAL MELTING.
C       MODES(2)  =0/1 FOR DO/DON'T INITIALIZE FA TO 0.
C       MODES(3)  =0/1 FOR PRINTER OFF/ON.
C       MODES(4)  =0/1 FOR FULL/SUMMARY OUTPUT.
C       MODES(5)  =0/1 FOR PRINT ALL/CHANGES ONLY.
C       
C       PARMS(1)  =STARTING TEMPERATURE.
C       PARMS(2)  =FINAL TEMPERATURE.
C       PARMS(3)  =TEMPERATURE STEP SIZE.  USE 0. FOR SINGLE PT CALC.
C       PARMS(4)  =TEMPERATURE INTERVAL FOR PRINT CONTROL.
C       PARMS(5)  =REFERENCE TEMPERATURE. 0/273 FOR K/C.
C       PARMS(6)  =MINIMUM FRACTION OF LIQUID/SOLID REMAINING.
C
C  CALLED BY:  MAIN;     CALLS:  STATE, PRNTER
C
      INTEGER MODES(5),LIST(10)
      REAL*4 PARMS(6)
      LOGICAL NOPRNT
C
      COMMON NS,SNAMES(5),SPARM(5)
      COMMON NPHAS,NCOMP,NCIMP,NCOMPT,NPDIM,NCDIM
      COMMON PNAMEA(10),CNAMEJ(20)
      COMMON FL,FA(10)
      COMMON CSJ(20),CLJ(20),CAJ(10,20)
      COMMON TA(10),UAJ(10,20)
      COMMON FKDAJ(10,20)
      COMMON IMPDIM,IMPL(10),IMCL(10),DA0(10),DAJ(10,20)
      COMMON RJ(20),QA(10),PAB(10,10)
C
C  INITIALIZE VARIOUS QUANTITIES
C
      MODEL=MODES(1)
      NOPRNT=.FALSE.
      NUPAGE=1
      NCHANG=-1
C
      FL=1.
      FLR=1.
      IF(MODES(2).NE.0) GOTO 20
      DO 10 K=1,NPHAS
10    FA(K)=0.
20    DO 30 J=1,NCOMP
30    CLJ(J)=CSJ(J)
C
C  GET INITIAL TEMPERATURE
C
      TEMP=PARMS(1)
C
C  START OF LOOP OVER TEMPERATURE
C
100   CONTINUE
      SPARM(1)=TEMP+PARMS(5)
      CALL STATE(NL,LIST,NERR)
C
C  ADJUST FLR AS APPROPRIATE FOR EACH MODEL
C
      GOTO(1100,1200,1300),MODEL
1100  FLR=FL
      GOTO 110
1200  FLR=FLR*FL
      GOTO 110
1300  FLR=FLR*(1.-FL)
      GOTO 110
C
110   IF(NL.NE.0)  NOPRNT=.FALSE.
      IF(NOPRNT)  GOTO 200
120   IF(MODES(5).EQ.0)  GOTO 150
      NT=NCHANG
      NCHANG=0
      IF(NL.EQ.0)  GOTO 140
      DO 130 K=1,NL
130   NCHANG=NCHANG*NPHAS+LIST(K)
140   IF(NCHANG.EQ.NT)  GOTO 200
      GOTO 160
150   IF(PARMS(4).LE.0.) GOTO 160
C
C  SEE IF IT IS TIME TO PRINT
C
      T=ABS(TEMP-PARMS(1))
      T=AMOD(T,PARMS(4))
      IF(ABS(T).GT.0.001)  GOTO 200
160   CALL PRNTER(MODES,TEMP,FLR,NERR,NUPAGE)
200   IF(NERR.NE.0)  RETURN
      IF(NL.EQ.0)  NOPRNT=.TRUE.
      IF(PARMS(3).EQ.0.)  RETURN
      IF(FLR.LE.PARMS(6))  RETURN
C
C  CHECK TO SEE IF OPERATOR PRESSED A KEY, AND QUIT IF HE DID.
C  SYSTEM FUNCTION INKEY(0) CHECKS KEYBOARD AND RETURNS ASCII VALUE IF
C  A KEY WAS PRESSED AND RETURNS 0 IF NO KEY WAS PRESSED
C
      IF(INKEY(0).NE.0) RETURN
C
C  CALCULATE NEXT TEMPERATURE AND RETURN IF LOWER LIMIT IS PASSED
C
      TEMP=TEMP+PARMS(3)
      IF((PARMS(2)-TEMP)/PARMS(3).LE.0.)  RETURN
C
C  SET UP MODEL FOR NEXT TEMPERATURE.
C
      GOTO(2100,2200,2300),MODEL
C
C  MODEL-SPECIFIC FUNCTIONS FOLLOW.
C
C  EQUILIBRIUM CYRSTALLIZATION OR MELTING:  USE OLD SYSTEM COMPOSITION.
C
2100  FLR=1.
      GOTO 100
C
C  FRACTIONAL CRYSTALLIZATION:  RESIDUAL LIQUID BECOMES NEW SYSTEM
C
2200  DO 2210 J=1,NCOMPT
2210  CSJ(J)=CLJ(J)
      GOTO 100
C
C  FRACTIONAL MELTING:  RESIDUAL SOLID BECOMES NEW SYSTEM
C
2300  DO 2310 J=1,NCOMP
2310  CSJ(J)=(CSJ(J)-CLJ(J)*FL)/(1.-FL)
      GOTO 100
C
      END
C
C----------------------------------------------------------------------
C
      SUBROUTINE PRNTER(MODES,TEMP,FLR,NERR,NUPAGE)
C
C  SUBROUTINE TO PRINT OUTPUT TO CONSOLE AND/OR PRINTER
C  OUTPUT IS ALWAYS SENT TO CONSOLE.  IF MODES(3).NE.0 THEN OUTPUT IS
C  ALSO SENT TO PRINTER.  FORMAT OF OUTPUT IS CONTROLLED BY MODES(4).
C  IF NUPAGE.NE.0, A FORM FEED WILL BE ISSUED.
C
C  CALLED BY:  DRIVER
C  CALLS:  CIMPL
C
      INTEGER MODES(5)
C
      COMMON NS,SNAMES(5),SPARM(5)
      COMMON NPHAS,NCOMP,NCIMP,NCOMPT,NPDIM,NCDIM
      COMMON PNAMEA(10),CNAMEJ(20)
      COMMON FL,FA(10)
      COMMON CSJ(20),CLJ(20),CAJ(10,20)
      COMMON TA(10),UAJ(10,20)
      COMMON FKDAJ(10,20)
      COMMON IMPDIM,IMPL(10),IMCL(10),DA0(10),DAJ(10,20)
      COMMON RJ(20),QA(10),PAB(10,10)
C
      COMMON/SYSIO/ NCON,NLST,NDSK
C
C  UPDATE IMPLICIT COMPONENTS, AND LIQUID COMPOSITION
C
      CALL CIMPL
C
C  OUTPUT TO CONSOLE FIRST
      NWRT = NCON
      IF (MODES(4).NE.0)  GOTO 300
C
C  FULL OUTPUT MODE
C
200   WRITE(NWRT,9200) (PNAMEA(J),J=1,NPHAS)
9200  FORMAT(1H0,8X,'SYS',4X,'LIQ ', 3(3X,A4),5X,5(3X,A4))
      WRITE(NWRT,9210) FL,(FA(J),J=1,NPHAS)
9210  FORMAT('  FRAC  ', 7X,4F7.4,5X,5F7.4)
      DO 220 K = 1, NCOMPT
220   WRITE(NWRT,9220) CNAMEJ(K),CSJ(K), CLJ(K), (CAJ(J,K),J=1,NPHAS)
9220  FORMAT(1H, A4,1X,5F7.4,5X,5F7.4)
      WRITE(NWRT,9230) TEMP, FLR
9230  FORMAT(1H,'TEMP = ', F10.4, 5X, 'FLR = ', F10.4)
      WRITE(NWRT,9240) (SNAMES(K),SPARM(K),K=1,NS)
9240  FORMAT(1H ,4(A4,'=',F10.4,5X))
      GOTO 400
C
C  SUMMARY OUTPUT MODE
C
300   IF(NUPAGE.EQ.0)  GOTO 310
      WRITE(NWRT,9300) (PNAMEA(K),K=1,NPHAS),(CNAMEJ(J),J=1,NCOMPT)
9300  FORMAT('0TEMP',4X,'FLR',4X,'FL',2X,3(3X,A4),5X,5(3X,A4),
     1  5X,5(3X,A4),5X,5(3X,A4))
310   WRITE(NWRT,9310) TEMP,FLR,FL,(FA(J),J=1,NPHAS),
     1  (CLJ(J),J=1,NCOMPT)
9310  FORMAT(1H ,F5.0,5F7.4,3(5X,5F7.4))
C
C WRITE ERROR MESSAGES
C
400   IF(NERR.EQ.1)  WRITE(NWRT,9400)
9400  FORMAT('0MATRIX INVERSION PROBLEM IN STATE'/)
      IF(NERR.EQ.2)  WRITE(NWRT,9410)
9410  FORMAT('0MAXIMUM ITERATIONS REACHED IN STATE'/)
C
C  CHECK FOR PRINTER OUTPUT
C
      IF((MODES(3).EQ.0).OR.(NWRT.EQ.NLST))  GOTO 500
      NWRT=NLST
      GOTO 100
      NUPAGE=0
      RETURN
      END
C
C----------------------------------------------------------------------
C
      SUBROUTINE STATE(NL,LIST,NERR)
C
C  STATE CALCULATES THE STATE OF THE SYSTEM (PHASES PRESENT, PHASE
C  PROPORTIONS, AND PHASE COMPOSITIONS) GIVEN THE SYSTEM COMPOSITION,
C  VALUES FOR INTENSIVE PARAMETERS, AND A STARTING ESTIMATE FOR THE
C  PHASE PROPORTIONS, FA.
C
C  ON EXIT:  NL IS THE NUMBER OF PHASES PRESENT.  LIST IS A LIST OF
C    PHASES PRESENT;  AND NERR IS A RETURN CODE.
C       NERR=0  NORMAL RETURN, SUCCESSFUL CALCULATION.
C           =1  MATRIX INVERSION PROBLEM
C           =2  MAX ITERATIONS WITHOUT CONVERGENCE.  TRY BETTER
C               STARTING ESTIMATES FOR FA.
C
C  CALLED BY:  DRIVER;    CALLS:  KDCALC, STIOCH, MATEQ
C
      REAL*4 DFA(10)
      INTEGER LIST(10)
C
      COMMON NS,SNAMES(5),SPARM(5)
      COMMON NPHAS,NCOMP,NCIMP,NCOMPT,NPDIM,NCDIM
      COMMON PNAMEA(10),CNAMEJ(20)
      COMMON FL,FA(10)
      COMMON CSJ(20),CLJ(20),CAJ(10,20)
      COMMON TA(10),UAJ(10,20)
      COMMON FKDAJ(10,20)
      COMMON IMPDIM,IMPL(10),IMCL(10),DA0(10),DAJ(10,20)
      COMMON RJ(20),QA(10),PAB(10,10)
C
C  MAXIMUM NUMBER OF ITERATIONS ALLOWED, TOLERANCE REQUIRED.
C
      DATA MAX/20/,TOL/1.E-5/
C
C  CALCULATE INITIAL VALUES FOR KD
C
      CALL KDCALC(1)
C
C  MAIN ITERATION LOOP STARTS HERE
C
      DO 500 ITER=1,MAX
C
C  USE CURRENT ESTIMATES OF FA, ETC TO CALC RJ, AND COMPOSITIONS
C
      DO 100 I=1,NCOMP
      T=1.
      DO 50 J=1,NPHAS
50    T=T+FA(J)*(FKDAJ(J,I)-1.)
      RJ(I)=1./T
      TL=CSJ(I)/T
      CLJ(I)=TL
      DO 60 J=1,NPHAS
60    CAJ(J,I)=TL*FKDAJ(J,I)
100   CONTINUE
C
C  EVALUATE SATURATION PARAMETERS QA, AND MAKE LIST OF STABLE PHASES.
C
      NL=0
      DO 200 J=1,NPHAS
      TQ=-TA(J)
      DO 150 I=1,NCOMP
      T=UAJ(J,I)
150   IF(T.NE.0.) TQ=TQ+T*CAJ(J,I)
      QA(J)=TQ
      IF((TQ.LE.0.).AND.(FA(J).LE.0.)) GOTO 200
      CALL STOICH(J,ISOK)
      IF(ISOK.EQ.0) GOTO 200
      NL=NL+1
      LIST(NL)=J
200   CONTINUE
C
C  IF NO PHASES STABLE, THEN FINISHED, SO RETURN
C
      IF(NL.EQ.0) GOTO 700
C
C  EVALUATE DERIVATIVES AND PREPARE FOR NEWTON-RAPHSON STEP
C
      DO 300 J=1,NL
      L=LIST(J)
      DFA(J)=QA(L)
      DO 280 K=1,NL
      M=LIST(K)
      T=0.
      DO 260 I=1,NCOMP
      TU=UAJ(L,I)
      IF(TU.EQ.0.) GOTO 260
      T=T+TU*CAJ(L,I)*RJ(I)*(FKDAJ(M,I)-1.)
260   CONTINUE
280   PAB(J,K)=T
300   CONTINUE
C
C  SOLVE AX=Y AND GET CORRECTIONS TO FA
C
      CALL MATEQ(PAB,NL,DFA,DET,NPDIM)
C
C  CHECK FOR SINGULAR MATRIX
C
      IF(ABS(DET).LT.1.E-10) GOTO 900
C
C  UPDATE FA, AND FL.  CALCULATE TST=MEAN-ABS-CORRECTION
C  MAKE SURE THAT 0.LE.FA.LE.1
C
      TST=0.
      FL=1.
      DO 350 J=1,NL
      L=LIST(J)
      T=FA(L)+DFA(J)
      IF(T.LT.0.) T=0.1*FA(L)
      IF(T.GT.1.) T=0.9+.1*FA(L)
      TST=TST+ABS(FA(L)-T)
      FA(L)=T
      FL=FL-T
350   CONTINUE
      TST=TST/NL
C
C  IF TST IS SMALLER THAN TOLERANCE, ITERATION HAS CONVERGED.
C
      IF(TST.LE.TOL) GOTO 700
C
C  UPDATE THOSE VALUES FOR KD THAT DEPEND ON COMPOSITION.
C
      CALL KDCALC(3)
C
C  DONE WITH THIS ITERATION
C
500     CONTINUE
C
C  FAILED TO CONVERGE AFTER MAX ITERATIONS, SO QUIT.
C
      NERR=2
      RETURN
C
C  CONVERGENCE ACHIEVED.  NORMAL RETURN.
C
700   NERR=0
      RETURN
C
C  SINGULAR MATRIX FOUND BY MATEQ.  CANT CONTINUE.
C
900   NERR=1
      RETURN
      END
C
C----------------------------------------------------------------------
C
      BLOCK DATA SETUP
C
C  BLOCK DATA ROUTINE TO SPECIFY INITIAL CONDITIONS FOR ALL STATE
C  VARIABLES.  MAY BE MODIFIED BY USER TO INCLUDE ADDITIONAL PHASES,
C  ETC.  ALL STATE VARIABLES ARE PASSED IN BLANK COMMON, AND DEFAULT
C  VARIABLE TYPES ARE USED.  NOTE:  S DENOTES SYSTEM, L DENOTES LIQUID,
C  A DENOTES PHASE 'A', AND J DENOTES COMPONENT 'J'.  THUS, CAJ REFERS
C  TO COMPONENT 'J' IN PHASE 'A'.
C
C  VARIABLES ARE:
C       NS      NUMBER OF INTENSIVE PARAMETERS
C       SNAMES  NAMES FOR INTENSIVE PARAMETERS
C       SPARM   VALUES FOR INTENSIVE PARAMETERS
C       NPHAS   NUMBER OF PHASES (EXCLUDING LIQUID).
C       NCOMP   NUMBER OF COMPONENTS.
C       NCIMP   NUMBER OF IMPLICIT COMPONENTS
C       NCOMPT  TOTAL NUMBER OF COMPONENTS, NCOMP+NCIMP
C       NPDIM   NUMBER OF PHASES IN DIMENSION STATEMENTS
C       NCDIM   NUMBER OF COMPONENTS IN DIMENSION STATEMENTS
C       PNAMEA  LIST OF PHASE NAMES.
C       CNAMEJ  LIST OF COMPONENT NAMES.
C       FL      FRACTION OF LIQUID IN SYSTEM.  CALCULATED IN STATE.
C       FA      FRACTION OF PHASE IN SYSTEM.  CALCULATED IN STATE.
C       CSJ     COMPOSITION OF SYSTEM.  ENTERED BY USER.
C       CLJ     COMPOSITION OF LIQUID.  CALCULATED BY STATE.
C       CAJ     COMPOSITION OF PHASE.  CALCULATED BY STATE.
C       TA      STOICHIOMETRIC TOTAL FOR PHASE
C       UAJ     STOICHIOMETRIC COEFF FOR COMPONENT IN PHASE
C               UAJ*CAJ=TA  (J SUMMED) IS STOICHIOMETIC CONDITION FOR
C               ANY PHASE.
C       FKDAJ   PARTITION COEFFICIENT FOR COMPONENT BETWEEN PHASE AND
C               LIQUID.  FKDAJ=CAJ/CLJ.  CALCULATED IN KDCALC.
C       IMPDIM  IMPLICIT COMPONENT:  LIST DIMENSIONS
C       IMPL    IMPLICIT COMPONENT:  PHASE LIST
C       IMCL    IMPLICIT COMPONENT:  COMPONENT LIST
C       DA0     IMPLICIT COMPONENT:  CONSTANT TERM
C       DAJ     IMPLICIT COMPONENT:  MULTIPLIERS
C       RJ      DISTRIBUTION COEFFICIENT FOR COMPONENT
C               RJ=CLJ/CSJ.  CALCULATED IN STATE.
C       QA      SATURATION MEASURE FOR PHASE.  CALCULATED IN STATE.
C       PAB     DQA/DFB.  CALCULATED IN STATE.
C
C  VALUES FOR:  NPHAS, NCOMP, PNAMEA, CNAMEJ, TA, UAJ MUST BE SPECIFIED
C  HERE.  OTHER VARIABLES ARE ALSO INITIALIZED HERE FOR CONVENIENCE.
C
C  PROGRAM IS DIMENSIONED FOR A MAXIMUM OF 10 PHASES AND 20 COMPONENTS.
C  USER CAN ALTER LIMITS BY CHANGING DIMENSIONS IN BLANK COMMON.
C
C
C
      COMMON NS,SNAMES(5),SPARM(5)
      COMMON NPHAS,NCOMP,NCIMP,NCOMPT,NPDIM,NCDIM
      COMMON PNAMEA(10),CNAMEJ(20)
      COMMON FL,FA(10)
      COMMON CSJ(20),CLJ(20),CAJ(10,20)
      COMMON TA(10),UAJ(10,20)
      COMMON FKDAJ(10,20)
      COMMON IMPDIM,IMPL(10),IMCL(10),DA0(10),DAJ(10,20)
      COMMON RJ(20),QA(10),PAB(10,10)
C
      DATA NS/1/,SNAMES/'T K',4*' '/,SPARM/1273.16,4*0./
      DATA NPHAS,NCOMP/3,6/,NCIMP,NCOMPT/1,7/,NPDIM,NCDIM/10,20/
      DATA PNAMEA/'PLAG','OL','CPX',7*' '/
      DATA CNAMEJ/'CAAL','NAAL','MGO','FEO','WO','TIO2','SIO2',13*' '/
      DATA FL,FA/1.,10*0./
      DATA CSJ/20*0./
      DATA CLJ/20*0./,CAJ/200*0./
      DATA TA/1.0,0.666667,1.0,7*0./
      DATA UAJ/200*0.0/
      DATA UAJ(1,1),UAJ(1,2)/1.666667,2.5/
      DATA UAJ(2,3),UAJ(2,4)/1.,1./
      DATA UAJ(3,1),UAJ(3,2)/1.3333333,2./
      DATA UAJ(3,3),UAJ(3,4),UAJ(3,5)/2.,2.,1./
      DATA UAJ(3,6)/1./
      DATA FKDAJ/200*0./
      DATA IMPDIM/10/,IMPL/1,2,3,7*0/,IMCL/7,7,7,7*0/
      DATA DA0/0.,0.,0.,7*0./
      DATA DAJ/.6666667,0.,.333333,7*0.,
     1          1.5,0.,1.,7*0.,
     2          0.,.5,1.,7*0.,
     3          0.,.5,1.,7*0.,  160*0./
      DATA RJ/20*1./,QA/10*0./,PAB/100*0./
      END
C
C----------------------------------------------------------------------
C
      SUBROUTINE KDCALC(KDMODE)
C
C  KDCALC EVALUATES PARTITION COEFFICIENTS FOR CURRENT SYSTEM STATE
C  AND INTENSIVE VARIABLES.  PARAMETER KDMODE REDUCES UNNECESSARY
C  CALCULATION BY BYPASSING UNCHANGED VALUES.
C  KDMODE=1 FORCES NEW KD CALCULATION, INCLUDING CONSTANT VALUES.
C        =2 UPDATES TEMP AND COMP DEPENDENT VALUES.
C        =3 UPDATES COMPOSITION DEPENDENT VALUES ONLY.
C
C  USER MUST INCLUDE ALL CODE NECESSARY TO CALCULATE KD FOR EACH
C  COMPONENT IN EACH PHASE.  RESULTS ARE RETURNED IN ARRAY FKDAJ.
C
C  CALLED BY:  STATE
C
      COMMON NS,SNAMES(5),SPARM(5)
      COMMON NPHAS,NCOMP,NCIMP,NCOMPT,NPDIM,NCDIM
      COMMON PNAMEA(10),CNAMEJ(20)
      COMMON FL,FA(10)
      COMMON CSJ(20),CLJ(20),CAJ(10,20)
      COMMON TA(10),UAJ(10,20)
      COMMON FKDAJ(10,20)
      COMMON IMPDIM,IMPL(10),IMCL(10),DA0(10),DAJ(10,20)
      COMMON RJ(20),QA(10),PAB(10,10)
C
C  STATEMENT FUNCTION ARHENF EVALUATES:  10**(A/T+B)
C
      ARHENF(A,B,T)=EXP(2.302585*(A/T+B))
C
      TKEL=SPARM(1)
      GOTO(100,200,300),KDMODE
C
C  DEFINE CONSTANT OR ZERO KD'S HERE
C
100   DO 120 J=1,NPHAS
      DO 120 I=1,NCOMP
120   FKDAJ(J,I)=0.
C
C  DEFINE TEMPERATURE DEPENDENT KD'S HERE
C
200   CONTINUE

      FKDAJ(2,3)=ARHENF(2715.,-1.158,TKEL)
      FKDAJ(2,4)=ARHENF(4230.,-2.741,TKEL)
      FKDAJ(3,1)=ARHENF(2418.,-2.30,TKEL)
      FKDAJ(3,2)=ARHENF(5087.,-4.48,TKEL)
      FKDAJ(3,3)=ARHENF(3798.,-2.28,TKEL)
      FKDAJ(3,4)=0.24*FKDAJ(3,3)
      FKDAJ(3,5)=ARHENF(1783.,-.753,TKEL)
      FKDAJ(3,6)=ARHENF(1034.,-1.27,TKEL)
C
C  DEFINE COMPOSITION DEPENDENT KD'S HERE
C
300   CONTINUE
      AN=CLJ(1)/(CLJ(1)+1.5*CLJ(2))
      B=0.2562*AN+1.122
      FKDAJ(1,1)=ARHENF(2446.,-B,TKEL)
      A=3283.*AN+3195.
      B=1.885*AN+2.318
      FKDAJ(1,2)=ARHENF(A,-B,TKEL)
C
999   RETURN
      END
C
C----------------------------------------------------------------------
C
      SUBROUTINE STOICH(JP,ISTABL)
C
C  STOICH PERMITS ARBITRARY STABILITY CONDITIONS TO BE SPECIFIED
C  FOR ANY PHASE.
C
C  ON ENTRY:  JP DENOTES PHASE BEING CONSIDERED.
C  ON EXIT:  ISTABL=1 IF PHASE IS STABLE;  ISTABL=0 IF PHASE IS
C    NOT STABLE.  ALL STATE VARIABLES ARE AVAILABLE IN COMMON.
C
C  ***WARNING*** STOICH MAY HINDER OR DESTROY CONVERGENCE OF STATE.
C
C  CALLED BY:  STATE
C
      COMMON NS,SNAMES(5),SPARM(5)
      COMMON NPHAS,NCOMP,NCIMP,NCOMPT,NPDIM,NCDIM
      COMMON PNAMEA(10),CNAMEJ(20)
      COMMON FL,FA(10)
      COMMON CSJ(20),CLJ(20),CAJ(10,20)
      COMMON TA(10),UAJ(10,20)
      COMMON FKDAJ(10,20)
      COMMON IMPDIM,IMPL(10),IMCL(10),DA0(10),DAJ(10,20)
      COMMON RJ(20),QA(10),PAB(10,10)
C
      ISTABL=1
      GOTO(900,900,900,900,900,900,900,900,900,900),JP
      RETURN
C
C  REPLACE ABOVE LINE WITH:
C
C       GOTO(900,900,300),JP
C
C  TO REQUIRE THAT THE COMPONENTS OF CPX TOTAL 1.0 OR MORE FOR
C  STABILITY OF CLINOPYROXENE.
C
300   T=2.*(CAJ(3,3)+CAJ(3,4))+CAJ(3,5)
      IF(T.LT.1.) ISTABL=0
900   RETURN
      END
C
C----------------------------------------------------------------------
C
      SUBROUTINE CIMPL
C
C  CALCULATE IMPLICIT COMPONENTS AND FINAL LIQUID COMPOSITION FOR
C  OUTPUT.
C
      COMMON NS,SNAMES(5),SPARM(5)
      COMMON NPHAS,NCOMP,NCIMP,NCOMPT,NPDIM,NCDIM
      COMMON PNAMEA(10),CNAMEJ(20)
      COMMON FL,FA(10)
      COMMON CSJ(20),CLJ(20),CAJ(10,20)
      COMMON TA(10),UAJ(10,20)
      COMMON FKDAJ(10,20)
      COMMON IMPDIM,IMPL(10),IMCL(10),DA0(10),DAJ(10,20)
      COMMON RJ(20),QA(10),PAB(10,10)
C
C  ZERO IMPLICIT COMPONENTS, IF ANY
C
      IF(NCIMP.EQ.0) GOTO 130
      N=NCOMP+1
      DO 100 J=N,NCOMPT
      CLJ(J)=0.
      DO 100 K=1,NPHAS
100   CAJ(K,J)=0.
C
C  SCAN LIST OF IMPLICIT CASES.  (IMPL(I)=0 SIGNALS END OF LIST)
C
130   DO 150 I=1,IMPDIM
      IMP=IMPL(I)
      IF (IMP.EQ.0) GOTO 200
      IMC=IMCL(I)
C
C  CALCULATE CAJ(IMP,IMC) IMPLICITLY USING:  CAJ=DA0+(DAJ*CAJ)
C  WHERE () IS SUMMED OVER J.  GET DA0 AND DAJ FROM LIST.
C
      S=DA0(I)
      DO 140 J=1,NCOMPT
140   S=S+DAJ(I,J)*CAJ(IMP,J)
150   CAJ(IMP,IMC)=S
200   CONTINUE
C
C  NOW RECALCULATE LIQUID COMPOSITION FROM SYSTEM AND SOLIDS.
C
      DO 300 J=1,NCOMPT
      S=CSJ(J)
      DO 250 K=1,NPHAS
250   S=S-CAJ(K,J)*FA(K)
300   CLJ(J)=S/FL
      RETURN
      END
C
C----------------------------------------------------------------------
C
      SUBROUTINE MATEQ(A,N,Y,DET,NDIM)
C
C  MATEQ SOLVES AX=Y FOR X, COMPUTES A-INVERSE, AND CALCULATES DET(A)
C  USING A VARIATION OF GAUSSIAN ELIMINATION.
C
C  HISTORY:  WRITTEN BY P J EBERLEIN (IBM 7074, UNIV OF ROCHESTER)
C            REVISED BY E C REINEMAN (IBM 360,    "  "      "    )
C               "    BY J S WEAVER (XDS SIGMA-7, QUEENS COLLEGE, CUNY)
C               "    BY J S WEAVER (APPLE II, L-DGO/COLUMBIA UNIV)
C    "KI" FIXED 03/05/85  JSW
C
C  ON ENTRY:  A IS REAL*4 MATRIX TO BE INVERTED;  Y IS REAL*4 VECTOR
C    TO SOLVE AX=Y;  DET IS REAL*4 SCALAR FOR DET(A).  NDIM IS 
C    DIMENSIONED SIZE FOR A AND Y.  N IS ACTUAL SIZE OF A AND Y.
C    THUS:  N.LE.NDIM !!!
C
C  ON EXIT:  INVERSE OF A REPLACES A;  X REPLACES Y;  DET CONTAINS
C    DET(A).  IF DET(A).LT.0.1E-7 THEN DET IS SET TO 0.0.  USER
C    MUST CHECK FOR DET.EQ.0. UPON RETURN.
C
C  CALLED BY:  STATE
C
      REAL*4 A(NDIM,NDIM),Y(NDIM)
      INTEGER*2 ICHG(40)
      DET=1.0
      DO 11 K=1,N
      AMX=ABS(A(K,K))
      IMX=K
      DO 1 I=K,N
      IF(ABS(A(I,K)).LE.AMX) GOTO 1
      AMX=ABS(A(I,K))
      IMX=I
1     CONTINUE
      IF(ABS(AMX).GT.0.1E-8) GOTO 3
2     DET=0.0
      RETURN
3     IF(IMX.EQ.K) GOTO 5
      DO 4 J=1,N
      TEMP=A(K,J)
      A(K,J)=A(IMX,J)
4     A(IMX,J)=TEMP
      ICHG(K)=IMX
      TEMP=Y(K)
      Y(K)=Y(IMX)
      Y(IMX)=TEMP
      DET=-DET
      GOTO 6
5     ICHG(K)=K
6     DET=DET*A(K,K)
      IF(ABS(DET).LT.0.1E-7) GOTO 2
      A(K,K)=1.0/A(K,K)
      DO 7 J=1,N
7     IF(J.NE.K) A(K,J)=A(K,J)*A(K,K)
      Y(K)=Y(K)*A(K,K)
      DO 9 I=1,N
      IF(I.EQ.K) GOTO 9
      DO 8 J=1,N
8     IF(K.NE.J) A(I,J)=A(I,J)-A(I,K)*A(K,J)
      Y(I)=Y(I)-A(I,K)*Y(K)
9     CONTINUE
      DO 10 I=1,N
10    IF(I.NE.K) A(I,K)=-A(I,K)*A(K,K)
11    CONTINUE
      DO 13 K=1,N
      L=N+1-K
      KI=ICHG(L)
      IF(L.EQ.KI) GOTO 13
      DO 12 I=1,N
      TEMP=A(I,L)
      A(I,L)=A(I,KI)
12    A(I,KI)=TEMP
13    CONTINUE
      RETURN
      END